name: Build Images

on:
  workflow_call:
    inputs:
      push_registry:
        required: false
        type: string
        default: localhost:5000/
        description: Registry to push to
      extra_tag:
        required: false
        type: string
        description: Extra tags for the built image
      pr_number:
        required: false
        type: number
        default: 0
        description: If passed, this is used to checkout the PR branch and calculate build version
    outputs:
      image_tags:
        description: "Pushed image tags"
        value: ${{ jobs.build.outputs.image_tags }}
      build_vsn:
        description: This is the calculated build version
        value: ${{ jobs.get }}

jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
      build_vsn: ${{ steps.get_version.outputs.build_vsn }}
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - uses: actions/checkout@v3
    - name: Get version
      id: get_version
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ inputs.pr_number }}" -ne "0" ]; then
          # PR
          git fetch --prune --unshallow
          branch=$(gh pr view ${{ inputs.pr_number }} --json headRefName --jq '.headRefName')
          git checkout $branch
          echo "build_vsn=pr-${{ inputs.pr_number }}-g$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          echo "build_vsn=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        else
          git fetch --prune --unshallow
          echo "build_vsn=$(git describe --dirty --abbrev=7 --tags --always --first-parent)" >> $GITHUB_OUTPUT
        fi
    - name: Docker meta for image
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          name=${{ inputs.push_registry }}ttpui
        tags: |
          type=ref,event=pr
          type=ref,event=tag
          type=raw,value=${{ inputs.extra_tag }},enable=${{ inputs.extra_tag != '' }}
          type=raw,value=${{ steps.get_version.outputs.build_vsn }},enable=${{ steps.get_version.outputs.build_vsn != '' }}
        flavor: latest=false
        labels: |
          org.opencontainers.image.title=ttpui
          org.opencontainers.image.authors=GreyOrange <support@greyorange.com>
          org.opencontainers.image.vendor=GreyOrange

    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: projects/1094715745642/locations/global/workloadIdentityPools/default-pool/providers/github-provider
        service_account: github-actions-repo-writer@greymatter-development.iam.gserviceaccount.com
        token_format: access_token
    - uses: docker/login-action@v2
      with:
        registry: us-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}
    - name: Use .npmrc
      uses: bduff9/use-npmrc@v1.1
      with:
        dot-npmrc: ${{ secrets.DOT_NPMRC }}
    - name: Load local configurations
      run: |
        bash ttpui_entrypoint_local.sh
    - name: Build image for ttpui
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # cache-from: |
        #   ${{ steps.meta.outputs.tags }}
        #   ${{ inputs.cache_get_registry }}ttpui:buildcache
        # cache-to: ${{ steps.meta-cache-to.outputs.cache }}

  report:
    name: Report
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
    - name: Add job summary
      run: |
        if [[ "${{ github.ref_type }}" == "branch" ]]; then
          echo 'Branch: `${{ github.ref_name }}`' >> $GITHUB_STEP_SUMMARY
        fi
        echo 'Docker image tag: `${{ needs.build.outputs.build_vsn }}`' >> $GITHUB_STEP_SUMMARY
        cat > workflow-results.json <<- EndOfMessage
        {
            "repo": "ttpui",
            "ref_type": "${{ github.ref_type }}",
            "ref_name": "${{ github.ref_name }}",
            "pr_number": "${{ inputs.pr_number }}",
            "build_vsn": "${{ needs.build.outputs.build_vsn }}",
            "container_tags": [ "${{ needs.build.outputs.build_vsn }}" ],
            "packages": [
                {
                    "package_type": "container",
                    "package_url": "us-docker.pkg.dev/greymatter-development/apps/ttpui"
                }
            ]
        }
        EndOfMessage
    - uses: actions/upload-artifact@v3
      with:
        name: workflow-results
        path: workflow-results.json